const express = require('express');
const request = require('request');
const morgan = require('morgan')
const cors = require('cors');
const { graphqlHTTP } = require('express-graphql');
const gql = require('graphql-tag');
const { buildASTSchema } = require('graphql');
const querystring = require('querystring');
const cookieParser = require('cookie-parser');

//graphql
const POSTS = [
  { author: "John Doe", body: "Hello world" },
  { author: "Jane Doe", body: "Hi, planet!" },
];

const schema = buildASTSchema(gql`
  type Query {
    posts: [Post]
    post(id: ID!): Post
    hello: String
    query: [Items]
  }

  type Post {
    id: ID
    author: String
    body: String
  }

type Images { height: Int url: String width: Int }

type Followers { href: String total: Int }

type ExternalUrls { spotify: String }

type Items {
  href: String
  id: String
  name: String
  popularity: Int
  type: String
  uri: String
  images: [Images ]
  genres: [String ]
  followers: Followers
  external_urls: ExternalUrls }

type AutogeneratedMainType { total: Int
  limit: Int
  offset: Int
  previous: String
  href: String
  next: String
  items: [Items ] }
`);

const mapPost = (post, id) => post && ({ id, ...post });

const root = {
  posts: () => POSTS.map(mapPost),
  post: ({ id }) => mapPost(POSTS[id], id),
  hello: () => 'Hello world!',
  query: () => {
    return new Promise(resolve => {
      request({
        url: "https://api.spotify.com/v1/me/top/artists",
        method: "GET",
        headers: {
          'Authorization': 'Bearer ' +
            'BQBRsO4hyNLrPr09sXg5uGr8d2zv25m55EqhcbzWoh-BQ3c1qYk_TL_CpPkfIEmmW-8gl4LMFJKg2NhLvWhL_MTsXzusgcnkkT7p8-8pku8jHyVPs48eEY9ggIg9rUnBLDl0Fy4jXlkGhRn_UVcMHWijaxojOL75cD5FWLSNvX3sixcYhvEiEvnJeyV6ldoco0JslxS5EID7p0lZ8wl6SNudxjSFB5LqT_Sm_40gMPuYioE-e8feCE_1p57HiyhTA9xgZBZLXOVe-QVZ5ntkWGZvoKkT_WfafSYeL99i'
        },
        json: true
      }, function (error, response, body) {
        if (!error)
          resolve(body);
      })
    }).then(value => {
      // process value here
      return value.items;
    })
  }
};

//spotify login prepare
const client_id = 'cfa601e4abca4a2f87f33698a4b4d293'; // Your client id
const client_secret = 'a17ceaf1443a4003a2d42458d6e7d8e7'; // Your secret
const redirect_uri = 'http://localhost:4000/callback'; // Your redirect uri

/**
 * Generates a random string containing numbers and letters
 * @param  {number} length The length of the string
 * @return {string} The generated string
 */
const generateRandomString = function (length) {
  let text = '';
  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

  for (let i = 0; i < length; i++) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
};

const stateKey = 'spotify_auth_state';

const app = express();
app.use(cors())
  .use(morgan())
  .use(cookieParser());
app.use('/graphql', graphqlHTTP({
  schema,
  rootValue: root,
  graphiql: true,
}));

//spotify routes
app.get('/login', function (req, res) {

  var state = generateRandomString(16);
  res.cookie(stateKey, state);

  // your application requests authorization
  var scope = 'user-read-private user-read-email user-read-recently-played user-top-read user-follow-read user-follow-modify playlist-read-private playlist-read-collaborative playlist-modify-public';
  res.redirect('https://accounts.spotify.com/authorize?' +
    querystring.stringify({
      response_type: 'code',
      client_id: client_id,
      scope: scope,
      redirect_uri: redirect_uri,
      state: state
    }));
});


app.get('/callback', function (req, res) {

  // your application requests refresh and access tokens
  // after checking the state parameter

  var code = req.query.code || null;
  var state = req.query.state || null;
  var storedState = req.cookies ? req.cookies[stateKey] : null;

  if (state === null || state !== storedState) {
    res.redirect('/#' +
      querystring.stringify({
        error: 'state_mismatch'
      }));
  } else {
    res.clearCookie(stateKey);
    var authOptions = {
      url: 'https://accounts.spotify.com/api/token',
      form: {
        code: code,
        redirect_uri: redirect_uri,
        grant_type: 'authorization_code'
      },
      headers: {
        'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))
      },
      json: true
    };

    request.post(authOptions, function (error, response, body) {
      if (!error && response.statusCode === 200) {
        // we can also pass the token to the browser to make requests from there
        var access_token = body.access_token,
          refresh_token = body.refresh_token;
        res.redirect('/#' +
          querystring.stringify({
            access_token: access_token,
            refresh_token: refresh_token
          }));
      } else {
        res.redirect('/#' +
          querystring.stringify({
            error: 'invalid_token'
          }));
      }
    });
  }
});

app.get('/refresh_token', function (req, res) {

  // requesting access token from refresh token
  var refresh_token = req.query.refresh_token;
  var authOptions = {
    url: 'https://accounts.spotify.com/api/token',
    headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },
    form: {
      grant_type: 'refresh_token',
      refresh_token: refresh_token
    },
    json: true
  };

  request.post(authOptions, function (error, response, body) {
    if (!error && response.statusCode === 200) {
      var access_token = body.access_token;
      res.send({
        'access_token': access_token
      });
    }
  });
});

const port = process.env.PORT || 4000
app.listen(port);
console.log(`Running a GraphQL API server at localhost:${port}/graphql`);
